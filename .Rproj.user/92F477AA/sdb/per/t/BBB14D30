{
    "contents" : "#' Explore a data frame visually\n#' \n#' Explore my dataset visually using an interactive shiny app\n#' @param dataset a data frame to explore\n#' @param ignore.names column names to ignore in exploration\n#' @param categorical.names column names to treat as categorical (discrete)\n#' @param continuous.names column names to treat as continuous\n#' @keywords shiny exploratory explore visualize 5D 5d five-dimensional\n#' @import ggplot2 shiny\n#' @export\n#' @examples \n#' \\dontrun{\n#' library(MASS)\n#' dexplr(Aids2)\n#' q(save='no')\n#' }\n\ndexplr <- function(dataset, ignore.names=c(), \n                   categorical.names = filter.by.type(dataset, classes.names, \n                      c('ordered', 'logical', 'factor')),\n                   continuous.names = filter.by.type(dataset, classes.names, \n                      c('integer', 'numeric', 'Date', 'ordered'))) {\n  \n  #require(shiny)\n  #require(ggplot2)\n  \n  classes.names <- lapply(dataset, function(x)class(x))\n  \n  shinyApp(ui = pageWithSidebar(\n    \n    headerPanel(\"Data Explorer\"),\n    \n    sidebarPanel(\n      \n      sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),\n                  value=min(1000, nrow(dataset)), step=50, round=0),\n      \n      selectInput('x', 'X', continuous.names),\n      selectInput('xtrans', 'X Transformation',c('None', 'log10', 'log2', 'log', 'sqrt')),\n      selectInput('y', 'Y', c('None', continuous.names)),\n      selectInput('ytrans', 'Y Transformation',c('None', 'log10', 'log2', 'log', 'sqrt')),\n      \n      checkboxInput('jitter', 'Jitter'),\n      checkboxInput('smooth', 'Smooth'),\n      checkboxInput('line', 'Line'),\n      \n      selectInput('color', 'Color', c('None', categorical.names)),  \n      selectInput('facet_row', 'Facet Row', c(None='.', categorical.names)),\n      selectInput('facet_col', 'Facet Column', c(None='.', categorical.names)),\n      downloadButton('downloadPlot', 'Download Plot')\n    ),\n    \n    mainPanel(\n      plotOutput('plot')\n    )\n  ),\n  server = function(input, output) {\n    \n    get_dataset <- reactive({\n      dataset[sample(nrow(dataset), input$sampleSize),]\n    })\n    \n    output$plot <- renderPlot({\n      \n      df <- get_dataset()\n      \n      if (input$y != 'None') {\n        p <- ggplot(df, aes_string(x=input$x, y=input$y)) + geom_point()\n        \n        if (input$ytrans != 'None') {\n          p <- p + scale_y_continuous(trans=input$ytrans)\n        }\n        \n        if (input$jitter)\n          p <- p + geom_jitter()\n        \n        if (input$smooth){\n          p <- p + geom_smooth()\n        }\n        if (input$line) {\n          p <- p + geom_smooth(method='lm')\n        }\n      }\n      else {\n        if (input$color != 'None') {\n          p <- ggplot(df, aes_string(x=input$x)) + geom_freqpoly()\n        }\n        else {\n          p <- ggplot(df, aes_string(x=input$x)) + geom_histogram(fill='magenta', alpha=0.3)\n        }\n      }\n      \n      if (input$xtrans != 'None') {\n        p <- p + scale_x_continuous(trans=input$xtrans)\n      }\n      \n      if (input$color != 'None') {\n        p <- p + aes_string(color=input$color)\n      }\n      \n      facets <- paste(input$facet_row, '~', input$facet_col)\n      if (facets != '. ~ .') {\n        p <- p + facet_grid(facets)\n      }\n      \n      print(p)\n      \n      # Allow the plot to be downloaded to the user's machines\n      output$downloadPlot <- downloadHandler(\n        filename = function(){'tmp.png'},\n        content = function(file) {\n          png(file)\n          print(p)\n          dev.off()\n        })\n      \n    }, height=400)\n    \n  })\n}",
    "created" : 1406051062766.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3010222983",
    "id" : "BBB14D30",
    "lastKnownWriteTime" : 1406060535,
    "path" : "~/Documents/explr/R/dexplr.R",
    "project_path" : "R/dexplr.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}