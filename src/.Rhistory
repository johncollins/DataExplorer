p + stat_summary(fun.y=mean, col='red', geom='line')
p <- ggplot(Dyestuff, aes(Batch, Yield)) + geom_boxplot()
p + stat_summary(fun.y=mean, col='red', geom='point')
p + stat_summary(fun.y=mean, shape=2, col='red', geom='point')
p + stat_summary(fun.y=mean, shape=3, col='red', geom='point')
p <- ggplot(Dyestuff, aes(Batch, Yield)) + geom_boxplot()
p + stat_summary(fun.x=unique, fun.y=mean, shape=3, col='red', geom='point')
p + stat_summary(fun.x=unique, fun.y=mean, shape=3, col='red', geom='line')
p + stat_summary(aes(group=1), fun.x=unique, fun.y=mean, shape=3, col='red', geom='line')
p <- ggplot(Dyestuff, aes(Batch, Yield)) + geom_boxplot()
p <- p + stat_summary(aes(group=1), fun.x=unique, fun.y=mean, shape=3, col='red', geom='line')
p + stat_summary(fun.x=unique, fun.y=mean, shape=3, col='red', geom='point')
plot_dyestudd <- function(D) {
p <- ggplot(Dyestuff, aes(Batch, Yield)) + geom_boxplot()
p <- p + stat_summary(aes(group=1), fun.x=unique, fun.y=mean, shape=3, col='red', geom='line')
p + stat_summary(fun.x=unique, fun.y=mean, shape=3, col='red', geom='point')
}
plot_dyestuff(Dyestuff)
plot_dyestuff <- function(D) {
p <- ggplot(Dyestuff, aes(Batch, Yield)) + geom_boxplot()
p <- p + stat_summary(aes(group=1), fun.x=unique, fun.y=mean, shape=3, col='red', geom='line')
p + stat_summary(fun.x=unique, fun.y=mean, shape=3, col='red', geom='point')
}
plot_dyestuff(Dyestuff)
head(Dyestuff2)
dim(Dyestuff2)
summary(Dyestuff2)
plot(Dyestuff2)
plot_dyestuff(Dyestuff2)
plot_dyestuff <- function(D) {
p <- ggplot(D, aes(Batch, Yield)) + geom_boxplot()
p <- p + stat_summary(aes(group=1), fun.x=unique, fun.y=mean, shape=3, col='red', geom='line')
p + stat_summary(fun.x=unique, fun.y=mean, shape=3, col='red', geom='point')
}
plot_dyestuff(Dyestuff2)
fm01 <- lmer(Yield,~ 1 + (1|Batch), Dyestuff)
fm01 <- lmer(Yield,~ 1 + (1|Batch), Dyestuff2)
fm01 <- lmer(Yield~ 1 + (1|Batch), Dyestuff)
print(fm01)
fm01 <- lmer(Yield~ 1 + (1|Batch), Dyestuff, REML=F)
print(fm01)
fm01.predict
fm01.predict()
fm01
predict(fm01, newdata=data.frame(Yield=c(1500, 1700)))
predict(fm01, newdata=data.frame(Yield=c(1500, 1700), Bathc=as.factor(c("G", "F"))))
predict(fm01, newdata=data.frame(Yield=c(1500, 1700), Batch=as.factor(c("G", "F"))))
predict(fm01, newdata=data.frame(Yield=c(1500, 1700), Batch=as.factor(c("A", "F"))))
ls(fm01)
fm01
ls(fm01)
summary(fm01)
library(phmm)
install.packages('phmm')
library(phmm)
n <- 50 # total sample size
nclust <- 5 # number of clusters
clusters <- rep(1:nclust,each=n/nclust)
beta0 <- c(1,2)
set.seed(13)
#generate phmm data set
Z <- cbind(Z1=sample(0:1,n,replace=TRUE),
Z2=sample(0:1,n,replace=TRUE),
Z3=sample(0:1,n,replace=TRUE))
b <- cbind(rep(rnorm(nclust),each=n/nclust),rep(rnorm(nclust),each=n/nclust))
Wb <- matrix(0,n,2)
for( j in 1:2) Wb[,j] <- Z[,j]*b[,j]
Wb <- apply(Wb,1,sum)
T <- -log(runif(n,0,1))*exp(-Z[,c(’Z1’,’Z2’)]%*%beta0-Wb)
C <- runif(n,0,1)
time <- ifelse(T<C,T,C)
event <- ifelse(T<=C,1,0)
mean(event)
phmmd <- data.frame(Z)
phmmd$cluster <- clusters
phmmd$time <- time
phmmd$event <- event
phmmd
fit.phmm <- phmm(Surv(time, event) ~ Z1 + Z2 + (-1 + Z1 + Z2 | cluster),
phmmd, Gbs = 100, Gbsvar = 1000, VARSTART = 1,
NINIT = 10, MAXSTEP = 100, CONVERG=90)
summary(fit.phmm)
fit.phmm <- phmm(Surv(time, event) ~ Z1 + Z2 + (-1 + Z1 + Z2 | cluster),
phmmd, Gbs = 100, Gbsvar = 1000, VARSTART = 1,
NINIT = 10, MAXSTEP = 100, CONVERG=90)
mean(event)
event <- ifelse(T<=C,1,0)
event
C <- runif(n,0,1)
C
T
T <- -log(runif(n,0,1))*exp(-Z[,c(’Z1’,’Z2’)]%*%beta0-Wb)
clear()
rm(list=ls())
library(phmm)
n <- 50 # total sample size
nclust <- 5 # number of clusters
clusters <- rep(1:nclust,each=n/nclust)
beta0 <- c(1,2)
set.seed(13)
#generate phmm data set
Z <- cbind(Z1=sample(0:1,n,replace=TRUE),
Z2=sample(0:1,n,replace=TRUE),
Z3=sample(0:1,n,replace=TRUE))
b <- cbind(rep(rnorm(nclust),each=n/nclust),rep(rnorm(nclust),each=n/nclust))
Wb <- matrix(0,n,2)
for( j in 1:2) Wb[,j] <- Z[,j]*b[,j]
Wb <- apply(Wb,1,sum)
T <- -log(runif(n,0,1))*exp(-Z[,c(’Z1’,’Z2’)]%*%beta0-Wb)
C <- runif(n,0,1)
time <- ifelse(T<C,T,C)
event <- ifelse(T<=C,1,0)
mean(event)
event
T
Time <- -log(runif(n,0,1))*exp(-Z[,c(’Z1’,’Z2’)]%*%beta0-Wb)
rm(list=ls())
n <- 50 # total sample size
nclust <- 5 # number of clusters
clusters <- rep(1:nclust,each=n/nclust)
beta0 <- c(1,2)
set.seed(13)
#generate phmm data set
Z <- cbind(Z1=sample(0:1,n,replace=TRUE),
Z2=sample(0:1,n,replace=TRUE),
Z3=sample(0:1,n,replace=TRUE))
b <- cbind(rep(rnorm(nclust),each=n/nclust),rep(rnorm(nclust),each=n/nclust))
Wb <- matrix(0,n,2)
for( j in 1:2) Wb[,j] <- Z[,j]*b[,j]
Wb <- apply(Wb,1,sum)
Time <- -log(runif(n,0,1))*exp(-Z[,c(’Z1’,’Z2’)]%*%beta0-Wb)
-log(runif(n,0,1))
exp(-Z[,c(’Z1’,’Z2’)]%*%beta0-Wb)
-Z[,c(’Z1’,’Z2’)]
Z
Time <- -log(runif(n,0,1))*exp(-Z[,c("Z1","Z2")]%*%beta0-Wb)
C <- runif(n,0,1)
time <- ifelse(Time<C,Time,C)
event <- ifelse(Time<=C,1,0)
mean(event)
phmmd <- data.frame(Z)
phmmd$cluster <- clusters
phmmd$time <- time
phmmd$event <- event
event
fit.phmm <- phmm(Surv(time, event) ~ Z1 + Z2 + (-1 + Z1 + Z2 | cluster),
phmmd, Gbs = 100, Gbsvar = 1000, VARSTART = 1,
NINIT = 10, MAXSTEP = 100, CONVERG=90)
summary(fit.phmm)
library(car) # for blackMoor data
library(nlme) # Non-Linear Mixed Effetcs
data(Blackmoor)
Blackmoor[1:20,]
plot(Blackmooor)
plot(Blackmoor)
Blackmoor$log.exercise <- log(Blackmoor$exercise + 5.0/60.0)
plot(Blackmoor)
plot(Blackmoor[ ,c('subject', 'log.exercise')])
attach(Blackmoor)
pat <- sample(unique(subject[group=='patient']), 20)
pat
control.ids <- sample(unique(subject[group=='control']), 20)
patient.20s <- groupedData(log.exercise ~ age | subject, data=Blackmoor[is.element(subject, pat),])
patient.ids <- sample(unique(subject[group=='patient']), 20)
patient.ids <- sample(unique(subject[group=='patient']), 20)
control.ids <- sample(unique(subject[group=='control']), 20)
patient.20s <- groupedData(log.exercise ~ age | subject, data=Blackmoor[is.element(subject, patient.ids),])
control.20s <- groupedData(log.exercise ~ age | subject, data=Blackmoor[is.element(subject, control.ids),])
print(plot(control.20s, main='Control Subjects', xlab='Age', ylab='log2 Exercise',
ylim=1.2*range(control.20s$log.exercise, patient.20s$log.exercise),
layout=c(5,4), aspect=1.0),
position=c(0,0,1,.5), more=T)
winsows()
print(plot(control.20s, main='Control Subjects', xlab='Age', ylab='log2 Exercise',
ylim=1.2*range(control.20s$log.exercise, patient.20s$log.exercise),
layout=c(5,4), aspect=1.0),
position=c(0,0,1,.5), more=T)
windows()
print(plot(control.20s, main='Control Subjects', xlab='Age', ylab='log2 Exercise',
ylim=1.2*range(control.20s$log.exercise, patient.20s$log.exercise),
layout=c(5,4), aspect=1.0),
position=c(0,0,1,.5), more=T)
print(plot(patient.20s, main='Patients', xlab='Age', ylab='log2 Exercise',
ylim=1.2*range(control.20s$log.exercise, patient.20s$log.exercise),
layout=c(5,4), aspect=1.0),
position=c(0,0.5, 1, 1), more=T)
patient.list <- lmList(log.exercise~I(age-8) | subject, subset=group=='patient', data=Blackmoor)
control.list <- lmList(log.exercise~I(age-8) | subject, subset=group=='control', data=Blackmoor)
patient.coef <- coef(patient.list)
control.coef <- coef(control.list)
old <- par(mfrow=c(1,2))
boxplot(patient.coef[,1], control.coef[,1], main='Intercepts', names=c('Patients', 'Controls'))
boxplot(patient.coef[,2], control.coef[,2], main='Slopes', names=c('Patients', 'Controls'))
par(old)
bm.lme.1 <- lme(log.exercise ~ I(age-8) * group, random = I(age-8) | subject, data=Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8) * group, random = I(age-8) | subject)#, data=Blackmoor)
lme
bm.lme.1 <- lme(log.exercise ~ I(age-8) * group, random = I(age-8) | subject), data=Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8) * group, random = I(age-8) | subject, data=Blackmoor)
bm.lme.1
detach(Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8) * group, random = I(age-8) | subject, data=Blackmoor)
head(Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8) * group, random = I(age-8) | subject, data=Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8) * group, random = I(age-8)|subject, data=Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8)*group, random = I(age-8)|subject, data=Blackmoor)
attach(Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8)*group, random = I(age-8)|subject, data=Blackmoor)
b=Blackmoor
bm.lme.1 <- lme(log.exercise ~ I(age-8)*group+ random = I(age-8)|subject, data=Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8)+group, random = I(age-8)|subject, data=Blackmoor)
bm.lme.1 <- lme(log.exercise ~ I(age-8)*group, random = I(age-8)|subject, data=Blackmoor)
rm(B)
rm(c'B'))
rm(c('B'))
rm(c('b'))
rm('b')
bm.lme.1 <- lme(log.exercise ~ I(age-8)*group, random = ~I(age-8)|subject, data=Blackmoor)
bm.lme.1
summary(bm.lme.1)
bm.lme.2 <- update(bm.lme.1, random = ~ 1 | subject)
bm.lme.3 <- update(bm.lme.1, random = ~ I(age - 8) - 1 | subject)
anova(bm.lme.1, bm.lme.2, bm.lm2.3)
anova(bm.lme.1, bm.lme.2, bm.lme.3)
anova(bm.lme.1, bm.lme.2)
anova(bm.lme.1, bm.lme.3])
anova(bm.lme.1, bm.lme.3)
anova(bm.lme.1, bm.lme.2, bm.lme.3)
anova(bm.lme.1, bm.lme.2)
anova(bm.lme.1, bm.lme.3)
pdata <- expand.grid(age=seq(8, 18, by=2), group=c('patient', 'control'))
pdata
pdata$log.exercise <- predict(bm.lme.1, pdata, level=0)
pdata
pdata$exercise <- (2^pdata$log.exercise) - 5.0/60.0
pdata
plot(pdata$age, pdata$exercise, type='n', xlab='Age (years)', ylab='Exercise (hours/week)')
points(pdata$age[1:6], pdata$exercise[1:6], type='b', pch=19, lwd=2)
points(pdata$age[7:12], pdata$exercise[7:12', type='b', pch=22, lty=2, lwd=2'])
points(pdata$age[7:12], pdata$exercise[7:12, type='b', pch=22, lty=2, lwd=2'])
points(pdata$age[7:12], pdata$exercise[7:12], type='b', pch=22, lty=2, lwd=2'])
points(pdata$age[7:12], pdata$exercise[7:12], type='b', pch=22, lty=2, lwd=2')
points(pdata$age[7:12], pdata$exercise[7:12], type='b', pch=22, lty=2, lwd=2)
points(pdata$age[7:12], pdata$exercise[7:12], type='b', pch=22, lty=2, lwd=2)
legend(locator(1), c('Patients', 'Controls'), pch=c(19, 22), lty=c(1,2), lwd=2)
legend(locator(1), c('Patients', 'Controls'), pch=c(19, 22), lty=c(1,2), lwd=2)
legend(locator(1), c('Patients', 'Controls'), pch=c(19, 22), lty=c(1,2), lwd=2)
library(lattice)
pbc2
library(JMBayes)
install.packages('JMBayes')
install.packages('JMbayes')
library(JMbayes)
install.packages(JMbayes)
install.packages('JMbayes'')
install.packages('JMbayes')
exit()
q()
q()
version
install.packages('JMbayes')
library(JMbayes)
library(lattice)
pbc$status2
pbc2
pbc2$status2 <- as.numeric(pbc2$status2 != 'alive')
pbc2.id$status2 <- as.numeric(pbc2.id$status2 != 'alive')
coxFit.pbc1 <- coxph(Surv(years,status2 ~ drug*age, data=pbc.id, x=T))
coxFit.pbc1 <- coxph(Surv(years,status2) ~ drug*age, data=pbc.id, x=T))
coxFit.pbc1 <- coxph(Surv(years,status2) ~ drug*age, data=pbc.id, x=T)
coxFit.pbc1 <- coxph(Surv(years,status2) ~ drug*age, data=pbc2.id, x=T)
coxFit
coxFit.pbc1
ls(coxFit.pbc1)
coxFit.pbc1$x
ls(coxFit.pbc1)
coxFit.pbc1$xlevels
s=Surv(pbc2.id$years,pbc2$idstatus2)
s=Surv(pbc2.id$years,pbc2.id$status2)
s
ls(s)
head(pbc2.id)
pbc2$status2 <- as.numeric(pbc2$status != 'alive')
pbc2.id$status2 <- as.numeric(pbc2.id$status != 'alive')
s=Surv(pbc2.id$years,pbc2.id$status2)
head(pbc2.id)
head(s)
head(pbc2.id)
pbc2.id$status2 <- as.numeric(pbc2.id$status == 'alive')
pbc2$status2 <- as.numeric(pbc2$status == 'alive')
head(pbc2.id)
pbc2$status2 <- as.numeric(pbc2$status != 'alive')
pbc2.id$status2 <- as.numeric(pbc2.id$status != 'alive')
head(pbc2.id)
plot(s)
s
ds = DataFrame(time=c(1,1,1,1,2,3,3), event=c(1,1,1,1,1,1,1))
ds = Data.Frame(time=c(1,1,1,1,2,3,3), event=c(1,1,1,1,1,1,1))
ds = Data.frame(time=c(1,1,1,1,2,3,3), event=c(1,1,1,1,1,1,1))
ds = data.frame(time=c(1,1,1,1,2,3,3), event=c(1,1,1,1,1,1,1))
ds
s=Surv(time=time, event=event, data=ds)
s
s=Surv(c(0,0,0,0,0,0,0), time, event, data=ds)
s=Surv(c(0,0,0,0,0,0,0), ds$time, ds$event)
s
coxph(s)
coxph(s ~ .)
coxph(s ~ )
coxph(s ~ time, data=ds)
coxph(s, data=ds)
coxph(s ~ time, data=ds)
coxph(s ~ time, ds)
coxph(s ~ , ds)
coxph(s ~ ., ds)
coxph(s ~ 1, ds)
c1<-coxph(s ~ 1, ds)
ls(c1)
coef(c1)
c1$formula
c1$y
c1$linear.predictors
plot(c1)
s=Surv(ds$time, ds$event)
c1<-coxph(s ~ 1, ds)
c1
coef(c1)
ls(c1)
c1$linear.predictors
c1$terms
c1$nevent
c1$loglik
summary(c1)
c1<-coxph(s ~ 1 + TIME, ds)
c1<-coxph(s ~ 1 + time, ds)
ds
c1<-coxph(s ~ 1 + as.numeric(time), ds)
c1<-coxph(s ~ 1 + time, ds)
ds <- data.frame(name=c("Barry", "Garry", "Harry", "Larry"), time=c(2, 3, 5, 8), status=c(1, 1, 0, 1), smoke=c(1,0,0,1))
ds
c <- coxph(Surv(ds$time, ds$status) ~ smoke, ds)
c
coef(c)
c <- coxph(Surv(ds$time, ds$status) ~ 1 + smoke, ds)
c
coef(c)
c <- coxph(Surv(ds$time, ds$status) ~ smoke, ds)
plot(c)
plot(Surv())
c
plot(survfit(c))
plot(survfit(c))
ds
plot(survfit(c), lty=c('solid', 'dashed'))
plot(survfit(c), lty=c('solid', 'dashed'), col=c('black', 'gray'))
plot(survfit(c), lty=c('solid', 'dashed'), col=c('black', 'gray', 'red'))
c <- coxph(Surv(ds$time, ds$status==1) ~ smoke, ds)
plot(survfit(c), lty=c('solid', 'dashed'), col=c('black', 'gray', 'red'))
c <- coxph(Surv(ds$time, ds$status==0) ~ smoke, ds)
plot(survfit(c), lty=c('solid', 'dashed'), col=c('black', 'gray', 'red'))
c <- coxph(Surv(ds$time, ds$status==1) ~ smoke, ds)
plot(survfit(c), lty=c('solid', 'dashed'), col=c('black', 'gray', 'red'))
coxph
library(MASS)
summary(volcano)
head(uspop)
uspop
head(warpbreaks)
head(women)
head(phones)
head(quine)
head(petrol)
summary(petrol)
names(petrol)
table(petrol$No)
table(petrol$SG)
table(petrol$VP)
class(petrol)
class(c(1,2,3)
)
class(c(1,2,3))
names(petrol)
table(petrol$V10)
table(petrol$EP)
names(petrol)
table(petrol$Y)
nrow(petrol)
nrow(CO2)
nrow(ChickWeight)
summary(ChickWeight)
nrow(DNase)
summary(DNase)
summary(EuStockMarkets)
summary(AirPassengers)
summary(Aids)
summary(Aids2)
nrow(Aids2)
names(Aids2)
class(Aids2$state)
class(Aids2$sex)
class(Aids2$diag)
table(Aids2$diag)
names(Aids2)
table(Aids2$death)
names(Aids2)
table(Aids2$status)
class(Aids2$status)
names(Aids2)
table(Aids2$T.categ)
class(Aids2$T.categ)
library(car)
library(caret)
install.packages('caret', dependencies=c('Depends', 'Suggests'))
library(caret)
library(carat)
library(caret)
library('caret')
install.packages('caret')
library(caret)
install.packages('RcppEigen')
library(caret)
data(segmentationData)
segmentationData$Cell <- NULL
training <- subset(segmentationData, Case == "Train")
testing <- subset(segmentationData, Case == "Test")
training$Case <- NULL
testing$Case <- NULL
str(training[,1:6])
trainX <- training[, names(training) != "Class"]
preProcValues <- preProcess(trainX, method = c("center", "scale"))
preProcValues
scaledTrain <- predict(preProcValues, trainX)
library(rpart)
rpart1 <- rpart(Class ~ ., data = training, control = rpart.control(maxdepth = 2))
rpart1
rpart1 <- rpart(Class ~ ., data = scaledTrain, control = rpart.control(maxdepth = 2))
head(scaledTrain)
rpart1 <- rpart(x=scaledTrain, y=training$Class, control = rpart.control(maxdepth = 2))
rpart1 <- rpart(Class ~ ., data=cbind(scaledTrain, training[,'Class']), control = rpart.control(maxdepth = 2))
rpart1 <- rpart(Class ~ ., data=cbind(scaledTrain, Class=training[,'Class']), control = rpart.control(maxdepth = 2))
head(scaledTrain)
rpart1
plot(rpart1)
plot.rpart(rpart1)
textt(rpart1)
text(rpart1)
plot(as.party(rpart1))
install.packages('partykit')
library(partykit)
plot(as.party(rpart1))
cvCtrl <- trainControl(method = "repeatedcv", repeats = 3,
summaryFunction = twoClassSummary,
classProbs = TRUE)
rpartTune <- train(Class ~ ., data = training, method = "rpart",
tuneLength = 30,
metric = "ROC",
trControl = cvCtrl)
rpartTune
grid <- expand.grid(.model = "tree",
.trials = c(1:100),
.winnow = FALSE)
c5Tune <- train(trainX, training$Class,
method = "C5.0",
metric = "ROC",
tuneGrid = grid,
trControl = cvCtrl)
svmTune <- train(x = trainX,
y = training$Class,
method = "svmRadial",
# The default grid of cost parameters go from 2^-2,
# 0.5 to 1,
# Well fit 9 values in that sequence via the tuneLength
# argument.
tuneLength = 9,
## Also add options from preProcess here too
preProc = c("center", "scale"),
metric = "ROC",
trControl = cvCtrl)
svmTune
svmPred <- predict(svmTune, testing[, names(testing) != "Class"])
confusionMatrix(svmPred, testing$Class)
df <- data.frame(A=as.ordered(c(1,2,3)), B=c('a0',b', 'cc''))
df <- data.frame(A=as.ordered(c(1,2,3)), B=c('a0','b', 'cc''))
)
df
df <- data.frame(A=as.ordered(c(1,2,3)), B=c('a0','b', 'cc'))
df
classes.names <- lapply(dataset, function(x)class(x))    # classes for each column
dataset=df
classes.names <- lapply(dataset, function(x)class(x))    # classes for each column
classes.names
filter.by.type <- function(dataset, classes.names, names.list)names(dataset)[unlist(lapply(classes.names,  function(x)length(intersect(x, names.list)) > 0))]
cat.names <- filter.by.type(dataset, classes.names, c('ordered', 'logical', 'factor'))
cat.names
class(cat.names)
cont.names <- names(dataset)[unlist(lapply(classes.names, function(x)length(intersect(x, c('integer', 'numeric', 'Date', 'ordered')))>0))]
cont.names
setwd("C:/Users/jcollins/Desktop/MyStuff/Projects/DataExplorer/DataExplorer/src")
list.files()
load('../data/aids.RData')
ls()
ls(aids)
rm(list=ls())
load('../data/aids.RData')
ls()
ls(aids)
cat.names <- names(dataset)[unlist(lapply(classes.names, function(x)length(intersect(x, c('ordered', 'logical', 'factor')))>0))]
update.packages('shiny')
update.packages('shiny')
library(shiny)
install.packages('shiny')
q()
